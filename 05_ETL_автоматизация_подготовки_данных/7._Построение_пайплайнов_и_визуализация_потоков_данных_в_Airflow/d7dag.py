import os
import logging
import pandas as pd
from airflow.operators.bash import BashOperator
from sqlalchemy import create_engine
from sqlalchemy.exc import SQLAlchemyError
from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import pendulum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

default_args = {
    'owner': 'Kostia',
    'depends_on_past': False,
    'start_date': pendulum.datetime(2024, 6, 1, tz='Europe/Moscow'),
    'email': ['dom@dom.ru'],
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 0,
    'retry_delay': timedelta(minutes=5)
}

dag2 = DAG('Kostia002',
           default_args=default_args,
           description="seminar_7",
           catchup=False,
           schedule_interval='0 8 * * *')


def percent(**kwargs):
    files = ['/opt/airflow/dags/d4_1.xlsx', '/opt/airflow/dags/d4_2.xlsx', '/opt/airflow/dags/d4_3.xlsx']

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
    MYSQL_USER = "airflow"
    MYSQL_PASSWORD = "airflow"
    MYSQL_HOST = "mysql-db"
    MYSQL_DB = "spark"

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —á–µ—Ä–µ–∑ SQLAlchemy —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    con = create_engine(f"mysql+pymysql://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}:3306/{MYSQL_DB}",
                        connect_args={'connect_timeout': 10})

    for file in files:
        if not os.path.exists(file):
            logger.error(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            raise FileNotFoundError(f"–§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        logger.info(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {file}")
        df = pd.read_excel(file, engine='openpyxl')

        required_columns = ['–ü–ª–∞—Ç–µ–∂ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–ª–≥—É', '–ü–ª–∞—Ç–µ–∂ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º']
        for col in required_columns:
            if col not in df.columns:
                logger.error(f"‚ùå –í —Ñ–∞–π–ª–µ {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col}!")
                raise KeyError(f"–û—à–∏–±–∫–∞: –≤ —Ñ–∞–π–ª–µ {file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col}!")

        df['–¥–æ–ª–≥'] = df['–ü–ª–∞—Ç–µ–∂ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–ª–≥—É'].cumsum().round(2)
        df['–ø—Ä–æ—Ü–µ–Ω—Ç—ã'] = df['–ü–ª–∞—Ç–µ–∂ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º'].cumsum().round(2)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–º–µ–Ω–æ–π
        try:
            table_exists = con.dialect.has_table(con.connect(), "credit", schema="spark")
            if not table_exists or os.path.basename(file) == "d4_1.xlsx":
                df.to_sql('credit', con, schema='spark', if_exists='replace', index=False, chunksize=500)
            else:
                df.to_sql('credit', con, schema='spark', if_exists='append', index=False, chunksize=500)
        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
            raise


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏
task1 = BashOperator(
    task_id='pip_install',
    bash_command="""
    pip install --no-cache-dir cryptography pandas pymysql sqlalchemy openpyxl pendulum
    """,
    dag=dag2
)

# –≠—Ç–æ—Ç DAG –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel-—Ñ–∞–π–ª–æ–≤
task2 = PythonOperator(
    task_id='python3',
    dag=dag2,
    python_callable=percent
)

task1 >> task2  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
